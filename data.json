{
    "project": {
        "name": "hpgl",
        "version": "0.0.0-alpha.1",
        "description": "A Node.js library to communicate with HPGL-compatible plotters and printers.",
        "url": ""
    },
    "files": {
        "src/hpgl.js": {
            "name": "src/hpgl.js",
            "modules": {
                "hpgl": 1
            },
            "classes": {
                "Plotter": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "hpgl": {
            "name": "hpgl",
            "submodules": {},
            "elements": {},
            "classes": {
                "Plotter": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/hpgl.js",
            "line": 15,
            "description": "The `hpgl` library makes it possible to interact with plotters and printers that support the\n*Hewlett-Packard Graphics Language* (a.k.a. *hpgl*). This language is the de facto standard for\nmost plotters."
        }
    },
    "classes": {
        "Plotter": {
            "name": "Plotter",
            "shortname": "Plotter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "hpgl",
            "namespace": "",
            "file": "src/hpgl.js",
            "line": 15,
            "description": "The `Plotter` class provides methods to interact with an HPGL-compatible plotter such as those\nmade by HP starting in the 1980s. Various other makers also use or support the HPGL protocol.\n\n#### Transport Layer\n\nBy default, this library uses the Node.js [serialport](https://www.npmjs.com/package/serialport)\nmodule for serial communication. This module offers native support on Mac, Linux and Windows. The\nlibrary can also use the [browser-serialport](https://www.npmjs.com/package/browser-serialport)\nmodule which uses the `chrome.serial` API (only available in Chrome Apps and NW.js). For\ndebugging purposes, it can also use the\n[virtual-serialport](https://www.npmjs.com/package/virtual-serialport).\n\n#### Coordinate Sytem\n\nThe coordinate system is anchored in the top-left of the paper sheet. Positive `x` goes right and\npositive `y` goes down. Some plotters work differently but I found it easier to stick with the\ncomputer screen standard.",
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/hpgl.js",
            "line": 65,
            "description": "The interval (in milliseconds) to wait before sending a new instruction (so as to not overflow\nthe serial connection).",
            "itemtype": "property",
            "name": "queueDelay",
            "type": "{int}",
            "default": "100",
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 75,
            "description": "The model name as reported by the device. Only available after the `ready` event has been\nfired.",
            "itemtype": "property",
            "name": "model",
            "type": "{String}",
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 84,
            "description": "The device's capabilities:\n\n -",
            "itemtype": "property",
            "name": "capabilities",
            "type": "{Object}",
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 94,
            "description": "[read-only] Array of all the paper sizes supported by the device",
            "itemtype": "property",
            "name": "supportedPapers",
            "type": "{String[]}",
            "readonly": "",
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 115,
            "description": "Opens a serial connection to the device.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "transport",
                    "description": "A transport object compatible with the `serialport` API interface.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "paper",
                            "description": "The paper size to use. Choices are:\n  - *A* (a.k.a \"letter\")\n  - *B* (a.k.a \"tabloid\")\n  - *A4*\n  - *A3*",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"A\""
                        },
                        {
                            "name": "orientation",
                            "description": "The orientation of the paper: *landscape* or\n*portrait*.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"landscape\""
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Plotter` object to allow method chaining.",
                "type": "Plotter"
            },
            "chainable": 1,
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 133,
            "description": "An object that is used for serial communication. This object must adhere to the `serialport`\nobject's interface.",
            "itemtype": "property",
            "name": "transport",
            "type": "{Object}",
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 213,
            "description": "Event emitted when a serial connection is successfully established to the device.",
            "itemtype": "event",
            "name": "ready",
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 227,
            "description": "Converts centimeters to plotter units. According to the documentation, a plotter unit is\nequivalent to 0.02488 millimeters.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_toPlotterUnits",
            "params": [
                {
                    "name": "cm",
                    "description": "The centimeter value to convert.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The converted value rounded to the closest **integer**.",
                "type": "Int"
            },
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 240,
            "description": "Converts a point (x, y) whose origin is in the usual top-left to a point following the HPGL\ncoordinates system. The input coordinates must be expressed in plotter units since this function\ntakes into account the desired orientation and the paper size.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_toHpglCoordinates",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate of the point (must be expressed in plotter units).",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of the point (must be expressed in plotter units).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An object whose **x** and **y** properties have been transformed.",
                "type": "Object"
            },
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 279,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_onData",
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 296,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onTransportError",
            "params": [
                {
                    "name": "error",
                    "description": "An object containing information about the error.",
                    "type": "Object"
                }
            ],
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 303,
            "description": "Event emitted when an error occurs. The specified function will receive an object with\ninformation about the error.",
            "itemtype": "event",
            "name": "ready",
            "params": [
                {
                    "name": "error",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 314,
            "description": "Immediately sends an HPGL instruction down the serial port. The instruction is automatically\n terminated with a semicolon.",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "instruction",
                    "description": "The instruction to send (unterminated).",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to call once the data has been sent to the device\n (default) or when an answer has been received from the device.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "waitForResponse",
                    "description": "Whether to execute the callback when the data is sent or\n when a response is received.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns the `Plotter` object to allow method chaining.",
                "type": "Plotter"
            },
            "chainable": 1,
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 362,
            "description": "Draws a text label.",
            "todo": [
                "text direction (double check with orientation)",
                "charsets"
            ],
            "itemtype": "method",
            "name": "drawText",
            "params": [
                {
                    "name": "text",
                    "description": "The text to write",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "characterSet",
                            "description": "The numerical ID of the character set to use to print\nthe label. Available sets are:\n - 0: ANSI\n - 1: 9825 Character Set\n - 2: French/German\n - 3: Scandinavian\n - 4: Spanish/Latin American\n - 6: JIS\n - 7: Roman Extensions\n - 8: Katakana\n - 9: ISO Internation Reference Version\n - 30: ISO Swedish\n - 31: ISO Swedish for Names\n - 32: ISO Norway, Version 1 (sic)\n - 33: ISO German\n - 34: ISO French\n - 35: ISO United Kingdom (sic)\n - 36: ISO Italian\n - 37: ISO Spanish\n - 38: ISO Portuguese\n - 39: ISO Norway, Version 2 (sic)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "characterWidth",
                            "description": "The width, in centimeters, to draw the text at. A\nnegative value mirrors the text for that dimension.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.187"
                        },
                        {
                            "name": "characterHeight",
                            "description": "The height, in centimeters, to draw the text at.\nA negative value mirrors the text for that dimension.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.269"
                        },
                        {
                            "name": "rotation",
                            "description": "The rotation to apply to the text (in degrees).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "slant",
                            "description": "The slant (italic) with which characters are lettered (in\ndegrees).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Plotter` object to allow method chaining.",
                "type": "Plotter"
            },
            "chainable": 1,
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 457,
            "description": "Converts a numerical value to an integer that matches HPGL's requirements (must be between\n-32768 and 32767).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_toHpglInteger",
            "params": [
                {
                    "name": "value",
                    "description": "The text to write",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The converted integer.",
                "type": "Int"
            },
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 480,
            "description": "Converts a numerical value to floating-point decimal value respecting HPGL's requirements (must\nbe between -128 and 127.9999 and must a maximum of 4 decimal places).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_toHpglDecimal",
            "params": [
                {
                    "name": "value",
                    "description": "The text to write",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The converted float.",
                "type": "Number"
            },
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 503,
            "description": "Draws a circle whose center is at the current location of the pen.",
            "itemtype": "method",
            "name": "drawCircle",
            "params": [
                {
                    "name": "radius",
                    "description": "The circle's radius (in centimeters).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "angle",
                    "description": "An integer between -180 and 180 degrees representing the chord angle.\nThe most commonly used values are 0-180. In this case, the smaller the angle is, the smoother the\ncircle will be. Negative values make the circle start at 180 degrees instead of 0.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "5"
                }
            ],
            "return": {
                "description": "Returns the `Plotter` object to allow method chaining.",
                "type": "Plotter"
            },
            "chainable": 1,
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 519,
            "description": "Draws a line from the current position to the specified destination position.",
            "itemtype": "method",
            "name": "drawLine",
            "params": [
                {
                    "name": "destX",
                    "description": "The `x` coordinate of the end of the line (in cm).",
                    "type": "Number"
                },
                {
                    "name": "destY",
                    "description": "The `y` coordinate of the end of the line (in cm).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the `Plotter` object to allow method chaining.",
                "type": "Plotter"
            },
            "chainable": 1,
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 535,
            "description": "Draws a series of lines starting at the current pen position and going, in turn, to all x/y pairs\nspecified in the array.",
            "itemtype": "method",
            "name": "drawLines",
            "params": [
                {
                    "name": "positions",
                    "description": "An array of line-end ositions in the form `[x1, y1, x2, y2, ...]`",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "linePattern",
                            "description": "Integer between 0 and 7. Value 0 prints dots at extermities\nonly. Values 1 to 6 prints various types of dotted lines. Value 7 (default) is a solid line.",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "7"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the `Plotter` object to allow method chaining.",
                "type": "Plotter"
            },
            "chainable": 1,
            "todo": [
                "add linePatternLength option"
            ],
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 588,
            "description": "Draws a rectangle from the current position to the specified destination position.",
            "itemtype": "method",
            "name": "drawRectangle",
            "params": [
                {
                    "name": "destX",
                    "description": "The `x` coordinate of the end of the line (in cm).",
                    "type": "Number"
                },
                {
                    "name": "destY",
                    "description": "The `y` coordinate of the end of the line (in cm).",
                    "type": "Number"
                },
                {
                    "name": "liftPenWhenDone",
                    "description": "Whether to automatically lift the pen when done p;otting the\nline.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns the `Plotter` object to allow method chaining.",
                "type": "Plotter"
            },
            "chainable": 1,
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 607,
            "description": "Lifts the pen and moves it to the specified x and y coordinates.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x",
                    "description": "Position along the **x** axis (in centimeters)",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position along the **y** axis (in centimeters)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the `Plotter` object to allow method chaining.",
                "type": "Plotter"
            },
            "chainable": 1,
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 624,
            "description": "Sets the velocity of the plotting pen. When the velocity `parameter` is set to `1`, the velocity\nwill be at its maximum of 38.1cm/s (default). When the `velocity` parameter is set to 0.1, the\nactual velocity will be 3.81cm/s.",
            "itemtype": "method",
            "name": "setVelocity",
            "params": [
                {
                    "name": "velocity",
                    "description": "A decimal number between 0 and 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the `Plotter` object to allow method chaining.",
                "type": "Plotter"
            },
            "chainable": 1,
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 648,
            "description": "Queues an HPGL instruction to be sent to the serial port. If any parameters are present, they are\n appended to the 2-letter mnemonic and separated by commas.",
            "itemtype": "method",
            "name": "queue",
            "params": [
                {
                    "name": "mnemonic",
                    "description": "2-letter code for the HPGL command to send",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "A string, a number or an or array of string or numbers to use\n as parameter(s) for the instruction.",
                    "type": "Number|String|Array"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function=null"
                },
                {
                    "name": "waitForResponse",
                    "description": "",
                    "type": "Boolean=false"
                }
            ],
            "return": {
                "description": "Returns the `Plotter` object to allow method chaining.",
                "type": "Plotter"
            },
            "chainable": 1,
            "class": "Plotter",
            "module": "hpgl"
        },
        {
            "file": "src/hpgl.js",
            "line": 687,
            "description": "The queue is comprised of objects:...",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_processQueue",
            "class": "Plotter",
            "module": "hpgl"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:115"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:314"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:362"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:457"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:480"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:503"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:519"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:535"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:588"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:607"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:624"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/hpgl.js:648"
        }
    ]
}